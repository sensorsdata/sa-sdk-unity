//// Created by 储强盛 on 2023/4/10.// Copyright © 2015-2023 Sensors Data Co., Ltd. All rights reserved.//// Licensed under the Apache License, Version 2.0 (the "License");// you may not use this file except in compliance with the License.// You may obtain a copy of the License at////      http://www.apache.org/licenses/LICENSE-2.0//// Unless required by applicable law or agreed to in writing, software// distributed under the License is distributed on an "AS IS" BASIS,// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.// See the License for the specific language governing permissions and// limitations under the License.//using UnityEngine;
using System.Collections;
using SensorsAnalyticsPCSDK.Constant;
using SensorsAnalyticsPCSDK.Database;
using SensorsAnalyticsPCSDK.Builder;
using System.Collections.Generic;
using SensorsAnalyticsPCSDK.Main;
using System;using SensorsAnalyticsPCSDK.Utils;namespace SensorsAnalyticsPCSDK.Tracker{
    public class SAAutoTracker : MonoBehaviour    {        private SAAutoTrackType _autoTrackType = SAAutoTrackType.None;        private readonly string kSAIsFirstTimeAppStart = "SensorsData_IsFirstTime_AppStart";        private bool _isFirstTime = false;        public SAAutoTracker() : base()        {                  }        public void EnableAutoTrack(SAAutoTrackType evnetType)        {            _autoTrackType = evnetType;        }        private void Awake()        {            _isFirstTime = !SAFileStore.HasObject(kSAIsFirstTimeAppStart);        }        /// <summary>        /// App 窗口激活或失去焦点时执行        /// </summary>        /// 失去焦点场景：        ///     用户切换到另一个应用程序        ///     用户最小化 unity 窗口。        ///     窗口失去焦点，但 unity 编辑器仍处于活动状态        /// 窗口进入活动状态场景：        ///     用户返回 unity 应用程序        ///     用户还原 unity 窗口        ///     当前活动的窗口不再是 unity 编辑器。        /// </summary>        /// <param name="hasFocus">是否激活</param>        void OnApplicationFocus(bool hasFocus)        {            if (hasFocus)            {                SALogger.LogInfo("App hasFocus");                if ((_autoTrackType & SAAutoTrackType.AppStart) != 0)                {                    TrackAppStartEvent();                }                // 开始 $AppEnd 事件计时                if ((_autoTrackType & SAAutoTrackType.AppEnd) != 0)                {                    SensorsAnalyticsSDK.InstanceSDK.TrackTimerStart(SAConstant.kSAEventNameAppEnd);                }                // 恢复事件计时                SensorsAnalyticsSDK.InstanceSDK.ResumeAllEventTimers();            }            else            {                SALogger.LogInfo("App out of focus");                if ((_autoTrackType & SAAutoTrackType.AppEnd) != 0)                {                    // 触发 $AppEnd 事件                    SAAutoTrackEventObject autoTrackObject = new SAAutoTrackEventObject(SAConstant.kSAEventNameAppEnd);                    SensorsAnalyticsSDK.InstanceSDK.TrackEventObject(autoTrackObject, null);                }                // Flush                SensorsAnalyticsSDK.InstanceSDK.Flush();                // 暂停事件计时                SensorsAnalyticsSDK.InstanceSDK.PauseAllEventTimers();            }        }        private void TrackAppStartEvent()        {            // 启动事件            SAAutoTrackEventObject autoTrackObject = new SAAutoTrackEventObject(SAConstant.kSAEventNameAppStart);            Dictionary<string, object> properties = new Dictionary<string, object>();            properties.Add(SAConstant.kSAEventPropertyIsFirstTime, _isFirstTime);            SensorsAnalyticsSDK.InstanceSDK.TrackEventObject(autoTrackObject, properties);            // 记录首次            if(_isFirstTime)            {                SAFileStore.WriteObject(kSAIsFirstTimeAppStart, 1);            }            _isFirstTime = false;        }        void OnApplicationQuit()        {            if (Application.isFocused == true)            {                OnApplicationFocus(false);            }            // 应用退出，自动 Flush            SensorsAnalyticsSDK.InstanceSDK.FlushImmediately();        }    }
}

