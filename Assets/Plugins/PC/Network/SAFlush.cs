//// Created by 储强盛 on 2023/3/22.// Copyright © 2015-2023 Sensors Data Co., Ltd. All rights reserved.//// Licensed under the Apache License, Version 2.0 (the "License");// you may not use this file except in compliance with the License.// You may obtain a copy of the License at////      http://www.apache.org/licenses/LICENSE-2.0//// Unless required by applicable law or agreed to in writing, software// distributed under the License is distributed on an "AS IS" BASIS,// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.// See the License for the specific language governing permissions and// limitations under the License.//using System;
using System.Collections.Generic;using SensorsAnalyticsPCSDK.Database;using SensorsAnalyticsPCSDK.Utils;using UnityEngine;using UnityEngine.Networking;namespace SensorsAnalyticsPCSDK.Network{    /// <summary>    /// 数据发送    /// </summary>    public class SAFlush    {        private readonly SAWebRequest _webRequest;        private readonly SAEventStore _eventStore;        private readonly SANetworkTask _networkTask;        private readonly MonoBehaviour _flushMono;        // 每个 body 条数        private int _bodyCount = 50;        public SAFlush(string serverURL, SAEventStore eventStore, MonoBehaviour mono = null)        {            if(!SAValidator.IsValidServerURL(serverURL))            {                return;            }            _webRequest = new SAWebRequest(serverURL);            _eventStore = eventStore;            // 动态加载 ThinkingSDKTask            GameObject networkTask = new GameObject("SANetworkTask", typeof(SANetworkTask));
            UnityEngine.Object.DontDestroyOnLoad(networkTask);            _networkTask = SANetworkTask.InstanceTask(eventStore);            _flushMono = mono;        }

        // 外部调用 flush，上传数据
        public void FlushEventRecords()        {            _networkTask.SyncInvokeAllTask();            SAResponseHandle responseHandle = BuildFlushResponseHandle();            _networkTask.StartRequest(_webRequest, responseHandle, _bodyCount);        }

        // 退后台，立即上传全部数据
        public void FlushImmediately()        {            _networkTask.SyncInvokeAllTask();            SAResponseHandle responseHandle = BuildFlushResponseHandle();            IList<Dictionary<string, object>> list = _eventStore.SelectEventRecords(_bodyCount);            if (list != null && list.Count > 0)            {                _flushMono.StartCoroutine(_webRequest.RequestData(responseHandle, list));            }        }

        // 构建回调处理
        private SAResponseHandle BuildFlushResponseHandle()        {            SAResponseHandle responseHandle = delegate (UnityWebRequest webRequest, IList<Dictionary<string, object>> eventDatas) {                int eventCount = 0;                if (webRequest != null)                {                    Int64 statusCode = webRequest.responseCode;                    // statusCode 判断上传成功，删除数据                    string messageDesc = "";                    if (statusCode >= 200 && statusCode < 300)                    {                        messageDesc = "【valid message】\n";                    }                    else                    {                        messageDesc = "【invalid message】\n";                    }                    string recordsContent = SAJSONUtils.StringWithJSONObject(eventDatas);                    SALogger.LogInfo(messageDesc, recordsContent);                    bool successCode = statusCode >= 200 && (statusCode < 500 || statusCode >= 600) && statusCode != 404 && statusCode != 403;                    if (successCode)                    {                        int recordCount = eventDatas.Count;                        eventCount = _eventStore.DeleteFirstRecords(recordCount);                    }                }                _networkTask.Release();                if (eventCount > 0)                {                    FlushEventRecords();                }            };            return responseHandle;        }
    }

}



