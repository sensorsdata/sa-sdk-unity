//// Created by 储强盛 on 2023/3/20.// Copyright © 2015-2023 Sensors Data Co., Ltd. All rights reserved.//// Licensed under the Apache License, Version 2.0 (the "License");// you may not use this file except in compliance with the License.// You may obtain a copy of the License at////      http://www.apache.org/licenses/LICENSE-2.0//// Unless required by applicable law or agreed to in writing, software// distributed under the License is distributed on an "AS IS" BASIS,// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.// See the License for the specific language governing permissions and// limitations under the License.//using System;
using System.Collections.Generic;
using SensorsAnalyticsPCSDK.Utils;

namespace SensorsAnalyticsPCSDK.Database{
    /// <summary>    /// 实现 event 数据存储，采用 PlayerPrefs，以 key-value 形式存储，    /// </summary>
    public class SADatabase    {        // 事件起始 Id，value 为整型        private readonly string kSAEventBeginIndexId = "ensorsData_eventBeginIndexId";        // 事件结束 Id，value 为整型        private readonly string kSAEventEndIndexId = "sensorsData_eventEndIndexId";        // 埋点记录存储 前缀        private readonly string kSAEventRecordPrefix = "sensorsData_event";        // 当前事件起始 Id，用于数据读取，部分数据上传后，指向最前记录的位置        private int _eventBeginIndex = -1;         // 事件结束 Id，指向当前最新入库的数据位置        private int _eventEndIndex = -1;        public SADatabase()        {            object BeginIndexObject = SAFileStore.ReadObject(kSAEventBeginIndexId, typeof(int));            _eventBeginIndex = BeginIndexObject as int? ?? -1;            object EndIndexObject = SAFileStore.ReadObject(kSAEventEndIndexId, typeof(int));            _eventEndIndex = EndIndexObject as int? ?? -1;        }        /// <summary>        ///  事件入库        /// </summary>        /// <param name="eventInfo">事件数据</param>        /// <returns>当前数据条数</returns>        public int InsertEventInfo(Dictionary<string, object>eventInfo)        {            if(!SAValidator.IsValidDictionary(eventInfo))            {                return EventRecordCount();            }            string eventJson = SAJSONUtils.StringWithJSONObject(eventInfo);            if(string.IsNullOrEmpty(eventJson))            {                SALogger.Error("insert into Database fail, eventInfo parsing failure");                return EventRecordCount();            }            Dictionary<string, object> eventRecord = new Dictionary<string, object>            {                // 存储 json，方便后续加密、上传等标记                ["content"] = eventJson            };            // 构建后的数据 json            string eventRecordJson = SAJSONUtils.StringWithJSONObject(eventRecord);            if (string.IsNullOrEmpty(eventJson))            {                SALogger.Error("insert into Database fail, eventRecord parsing failure");                return EventRecordCount();            }            string eventRecordId = BuildNextEventRecordId();            // 事件存储            SAFileStore.WriteObject(eventRecordId, eventRecordJson);            // 入库后，递增结束 Id            IncrementEventEndRecordId();            SALogger.LogInfo("insert into Database success, current count is ", EventRecordCount());            return EventRecordCount();        }        /// <summary>        /// 删除前面固定条数事件记录        /// </summary>        /// <param name="recordCount"></param>        public int DeleteFirstRecords(int recordCount)        {            // 事件数量            int eventCount = EventRecordCount();            if(eventCount == 0)            {                SALogger.Warn("DeleteFirstRecords fail, current eventCount is 0");                return 0;            }            // 实际需要删除数量            int deleteCount = Math.Min(recordCount, eventCount);            for(int index = 0; index < deleteCount; index ++)            {                string recordId = string.Format("{0}_{1}", kSAEventRecordPrefix, _eventBeginIndex + index);                SAFileStore.RemoveObject(recordId);                _eventBeginIndex += 1;            }            // 更新事件起始 Id            SAFileStore.WriteObject(kSAEventBeginIndexId, _eventBeginIndex);            if(recordCount == eventCount)            {                // 删除所有事件后，重置 Id 信息                ResetEventRecordId();            }            eventCount = EventRecordCount();            return eventCount;        }        public void DeleteAllRecords()        {            // 事件数量            int eventCount = EventRecordCount();           if(eventCount == 0)            {                return;            }            DeleteFirstRecords(eventCount);            // 删除所有事件后，重置 Id 信息            ResetEventRecordId();        }        /// <summary>        /// 读取指定条数的事件记录        /// </summary>        /// <param name="recordCount"></param>        /// <returns></returns>        public List<Dictionary<string, object>> SelectEventRecords(int recordCount)        {            // 事件数量            int eventCount = EventRecordCount();            if(eventCount == 0)            {                SALogger.Warn("SelectEventRecords fail, current eventCount is 0");                return null;            }            List<Dictionary<string, object>> records = new List<Dictionary<string, object>>();            int selectCount = Math.Min(eventCount, recordCount);            for(int index = 0; index < selectCount; index ++)            {                // 构建 recordId                string recordId = string.Format("{0}_{1}", kSAEventRecordPrefix, _eventBeginIndex + index);                // 读取记录                string recordJson = SAFileStore.ReadObject(recordId, typeof(string)) as string;                if(string.IsNullOrEmpty(recordJson))                {                    SAFileStore.RemoveObject(recordId);                    continue;                }                Dictionary<string, object> recordDic = SAJSONUtils.JSONObjectWithString(recordJson);                if(recordDic == null || recordDic.Count == 0)                {                    SAFileStore.RemoveObject(recordId);                    continue;                }                // 从记录中，解析数据内容 content                if(!recordDic.ContainsKey("content"))                {                    SAFileStore.RemoveObject(recordId);                    continue;                }                string contentJson = recordDic["content"] as string;                if (string.IsNullOrEmpty(contentJson))                {                    continue;                }                Dictionary<string, object> eventInfoDic = SAJSONUtils.JSONObjectWithString(contentJson);                if (eventInfoDic == null || eventInfoDic.Count == 0)                {                    continue;                }                // 拼接上传时间                eventInfoDic["_flush_time"] = (long)(DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1))).TotalMilliseconds;                records.Add(eventInfoDic);            }            return records;        }        // 构建下一条事件 Id，用于入库存储        private string BuildNextEventRecordId()        {            string recordId = string.Format("{0}_{1}", kSAEventRecordPrefix, _eventEndIndex + 1);            return recordId;        }        // 递增事件结束 Id        private void IncrementEventEndRecordId()        {            _eventEndIndex += 1;            SAFileStore.WriteObject(kSAEventEndIndexId, _eventEndIndex);            // 如果初始事件为空，设置起始 Id            if(_eventBeginIndex < 0)            {                _eventBeginIndex = 0;                SAFileStore.WriteObject(kSAEventBeginIndexId, _eventBeginIndex);            }        }        // 计算当前事件记录数量        public int EventRecordCount()        {            // 无数据            if (_eventBeginIndex < 0 || _eventEndIndex < 0)            {                return 0;            }            // 事件数量            int eventCount = _eventEndIndex - _eventBeginIndex + 1;            return eventCount;        }        // 重置事件记录 Id 信息        private void ResetEventRecordId()        {            _eventEndIndex = -1;            _eventBeginIndex = -1;            SAFileStore.RemoveObject(kSAEventBeginIndexId);            SAFileStore.RemoveObject(kSAEventEndIndexId);        }    }


}
